// WIP
"clang_opt_level": "Optimization level"
"clang_opt_level.-O0": "No optimization"
"clang_opt_level.-O1": "Some optimization"
"clang_opt_level.-O2": "Heavy optimization"
"clang_opt_level.-O3": "Aggressive optimization at the expense of code size"
"clang_opt_level.-Ofast": "All options from -O3 + optimizations that may violate strict compliance with language standards"
"clang_opt_level.-Os": "Like -O2, but optimize for smallest code size"
"clang_opt_level.-Oz": "Like -Os, but reduces code size further"
"clang_debug_level": "Debug information"
"clang_debug_level.-g0": "No debug info"
"clang_debug_level.-g1": "Minimal trace info"
"clang_debug_level.-g2": "Local variable tracking"
"clang_debug_level.-g3": "Macro expansions"
"clang_language": "Language"
"clang_language.-x c++": "C++"
"clang_language.-x c": "C"
"clang_language_standard": "Language standard"
"clang_language_standard.-std=c++98": "ISO C++ 1998 with amendments"
"clang_language_standard.-std=c++03": "ISO C++ 1998 with amendments"
"clang_language_standard.-std=gnu++98": "ISO C++ 1998 with amendments and GNU extensions"
"clang_language_standard.-std=c++0x": "ISO C++ 2011 with amendments"
"clang_language_standard.-std=c++11": "ISO C++ 2011 with amendments"
"clang_language_standard.-std=gnu++0x": "ISO C++ 2011 with amendments and GNU extensions"
"clang_language_standard.-std=gnu++11": "ISO C++ 2011 with amendments and GNU extensions"
"clang_language_standard.-std=c++1y": "ISO C++ 2014 with amendments"
"clang_language_standard.-std=c++14": "ISO C++ 2014 with amendments"
"clang_language_standard.-std=gnu++1y": "ISO C++ 2014 with amendments and GNU extensions"
"clang_language_standard.-std=gnu++14": "ISO C++ 2014 with amendments and GNU extensions"
"clang_language_standard.-std=c++1z": "Working draft for ISO C++ 2017"
"clang_language_standard.-std=gnu++1z": "Working draft for ISO C++ 2017 and GNU extensions"
"clang_no_rtti": "Disable standard c++ runtime type information features"
"clang_no_exceptions": "Disable exception handling"

"gcc_opt_level": "Optimization level"
"gcc_opt_level.-O0": "No optimization"
"gcc_opt_level.-O1": "Some optimization"
"gcc_opt_level.-O2": "Standard optimization"
"gcc_opt_level.-O3": "Heavy optimization"
"gcc_debug_level": "Debug information"
"gcc_debug_level.-g0": "No debug info"
"gcc_debug_level.-g1": "Minimal trace info"
"gcc_debug_level.-g2": "Local variable tracking"
"gcc_debug_level.-g3": "Macro expansions"

"ido_opt_level": "Optimization level"
"ido_opt_level.-O0": "No optimization"
"ido_opt_level.-O1": "Some optimization"
"ido_opt_level.-O2": "Standard optimization"
"ido_opt_level.-O3": "Heavy optimization"
"ido_debug_level": "Debug information"
"ido_debug_level.-g0": "No debug info"
"ido_debug_level.-g1": "Minimal trace info"
"ido_debug_level.-g2": "Local variable tracking"
"ido_debug_level.-g3": "Macro expansions"

"mwcc_opt_level": "Optimization level"
"mwcc_opt_level.-O0": "No optimization"
"mwcc_opt_level.-O1": "Some optimization"
"mwcc_opt_level.-O1,p": "Some optimization + speed"
"mwcc_opt_level.-O1,s": "Some optimization + space"
"mwcc_opt_level.-O2": "Standard optimization"
"mwcc_opt_level.-O2,p": "Standard optimization + speed"
"mwcc_opt_level.-O2,s": "Standard optimization + space"
"mwcc_opt_level.-O3": "Heavy optimization"
"mwcc_opt_level.-O3,p": "Heavy optimization + speed"
"mwcc_opt_level.-O3,s": "Heavy optimization + space"
"mwcc_opt_level.-O4": "Extreme optimization"
"mwcc_opt_level.-O4,p": "Extreme optimization + speed"
"mwcc_opt_level.-O4,s": "Extreme optimization + space"
"mwcc_floating_point": "Floating point"
"mwcc_floating_point.-fp soft": "Software emulation; default"
"mwcc_floating_point.-fp off": "No floating point"
"mwcc_floating_point.-fp hard": "Hardware"
"mwcc_floating_point.-fp fmadd": "Hardware + -fp_contract"
"mwcc_inline_options": "Inline options"
"mwcc_inline_options.-inline on": "Turn on inlining for 'inline' functions; default"
"mwcc_inline_options.-inline off": "Turn off inlining"
"mwcc_inline_options.-inline auto": "Auto-inline small functions"
"mwcc_inline_options.-inline noauto": "Do not auto-inline; default"
"mwcc_inline_options.-inline all": "Turn on aggressive inlining: same as -inline on, auto'"
"mwcc_inline_options.-inline deferred": "Defer inlining until end of compilation unit"
// TODO this section
<FlagSet name="String constant options">
            <FlagOption flag="-str reuse" description="Equivalent strings are the same object; default" />
            <FlagOption flag="-str pool" description="Pool strings into a single data object" />
            <FlagOption flag="-str readonly" description="make all string constants read-only" />
            <FlagOption flag="-str reuse,pool,readonly" description="Reuse + pool + readonly" />
        </FlagSet>

        <FlagSet name="Source language">
            <FlagOption flag="-lang=c" description="C" />
            <FlagOption flag="-lang=c++" description="C++" />
            <FlagOption flag="-lang=c99" description="C99" />
            <FlagOption flag="-lang=ec++" description="Embedded C++" />
            <FlagOption flag="-lang=objc" description="Allow Objective C extensions" />
        </FlagSet>

        <Checkbox flag="-g" description="Enable debug info" />

        <Checkbox flag="-align powerpc" description="PowerPC alignment; default" />
        <Checkbox flag="-char unsigned" description="Chars are unsigned" />                 (ON/OFF)
        <Checkbox flag="-Cpp_exceptions off" description="Disable C++ exceptions" />
        <Checkbox flag="-enc SJIS" description="Specifies SJIS source encoding" />
        <Checkbox flag="-enum int" description="Use int-sized enums" />
        <Checkbox flag="-fp_contract on" description="Generate fused multiply-add instructions" />
        <Checkbox flag="-maxerrors 1" description="Maximum number of errors to print (1)" />
        <Checkbox flag="-msgstyle gcc" description="gcc error/warning message style" />
        <Checkbox flag="-nodefaults" description="Equivalent to '-nostdinc'" />
        <Checkbox flag="-rostr" description="Make string constants read-only" />
        <Checkbox flag="-RTTI off" description="Disable run-time typing information (for C++)" />
        <Checkbox flag="-use_lmw_stmw on" description="Use multiple-word load/store instructions for structure copies; default" />


"psyq_opt_level": "Optimization level"
"psyq_opt_level.-O0": "No optimization"
"psyq_opt_level.-O1": "Some optimization"
"psyq_opt_level.-O2": "Standard optimization"
"psyq_opt_level.-O3": "Heavy optimization"
"psyq_opt_level.-Os": "Size optimization"
"psyq_debug_level": "Debug information"
"psyq_debug_level.-g0": "No debug info"
"psyq_debug_level.-g1": "Minimal trace info"
"psyq_debug_level.-g2": "Local variable tracking"
"psyq_debug_level.-g3": "Macro expansions"

"char_type": "char type"
"char_type.-fsigned-char": "char will be used as signed char"
"char_type.-funsigned-char": "char will be used as unsigned char"

"mips_version": "Mips version"
"kpic": "-non_shared if unchecked"

"endianness": "Endianness"
"endianness.-mel": "Little endian"
"endianness.-meb": "Big endian"

"sdata_limit": "Small data limit"
"sdata_limit.-G0": "0 bytes"
"sdata_limit.-G4": "4 bytes"
"sdata_limit.-G8": "8 bytes"
